<?xml version="1.0" encoding="UTF-8"?>
<migration 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation ="kdmResult.xsd">
	<microservices>
[%
	for(microservicio in Microservicio.all) 
	{
		%]
		<microservice name="[%=microservicio.name.replace(' ','').toLowerCase()%]">
		[%
			for(cluster in microservicio.elementos) 
			{
				%]
			<qualifiedType>[%=cluster.name%]</qualifiedType>
				[%
			}
		%]
		</microservice>
		[%
	}
%]
	</microservices>
	<relationships>
[%
	for(microservicio in Microservicio.all) 
	{
			//Conectores que hay entre clusters
			for(invocacion in microservicio.invocacionesServicios) 
			{
				var invocaOrigen = invocacion.fromMethod;
				var invocaDestino = invocacion.toMethod;
				
			%]
		<methodInvocation>
			<from>
				<qualifiedType>[%=invocaOrigen.clase.eContainer.name%][%=invocaOrigen.clase.name%]</qualifiedType>
				<sourceMicroservice>[%=invocaOrigen.microservicio.replace(' ','').toLowerCase()%]</sourceMicroservice>
				<fromMethod>
					<visibility>public</visibility>
					<returnType>[%=invocaOrigen.returnType%]</returnType>
					<methodName>[%=invocaOrigen.nombreMetodo%]</methodName>
					<parameters>
					[%
					//Se recorren todas los atributos del metodo origen					
					for(atributoMetodoOrigen in invocaOrigen.atributosIn) 
					{
					%]
						<parameter>
							<paramType>[%=atributoMetodoOrigen.type%]</paramType>
							<paramName>[%=atributoMetodoOrigen.name%]</paramName>
						</parameter>
					[%
					}
					%]
					</parameters>
				</fromMethod>
			</from>
			<to>
				<qualifiedType>[%=invocaDestino.clase.eContainer.name%][%=invocaDestino.clase.name%]</qualifiedType>
				<targetMicroservice>[%=invocaDestino.microservicio.replace(' ','').toLowerCase()%]</targetMicroservice>
				<toMethod>
					<visibility>public</visibility>
					<returnType>[%=invocaDestino.returnType%]</returnType>
					<methodName>[%=invocaDestino.nombreMetodo%]</methodName>
					<parameters>
					[%
					//Se recorren todas los atributos del metodo destino					
					for(atributoMetodoDestino in invocaDestino.atributosIn) 
					{
					%]
						<parameter>
							<paramType>[%=atributoMetodoDestino.type%]</paramType>
							<paramName>[%=atributoMetodoDestino.name%]</paramName>
						</parameter>
					[%
					}
					%]
					</parameters>
				</toMethod>
			</to>
		</methodInvocation>	
			[%			
			}
	}
%]
	</relationships>
</migration>