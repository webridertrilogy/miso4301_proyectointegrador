pre {
  "Running Simplification Transformation".println();
    eliminarDiagramasDuplicados();
	var microservicios = source!Microservicio.allInstances();	
	var rangoColores = Sequence {target!Color#blue, target!Color#green, target!Color#yellow, target!Color#orange, target!Color#red, target!Color#purple, target!Color#gray};  
	var simplificado = new target!Diagrama();
	simplificado.name = "Microservicios";
	simplificado.elementos = new Sequence();
	simplificado.isRoot = true;
}

operation eliminarDiagramasDuplicados() {
	delete target!ElementoDiagrama.allInstances();
	delete target!Asociacion.allInstances();
	
}


operation generarDiagramaSimplificado() {	
	"Numero microservicios obtenidos: ".print();
	microservicios.size().println();
	
	
	var countColor = 1;
	var elipsesEjb = new Set();
	for (microservicio in microservicios) {
			
			("Conviertiendo " + microservicio.name).println();
		
			var elipseMs  = new target!Elipse();
			if (countColor == 7){
				countColor = 0;
			}
			
			elipseMs.color = rangoColores.get(countColor);
			countColor = countColor + 1;
			elipseMs.largo = 10;
			elipseMs.alto = 10;
			elipseMs.name = microservicio.name;
			elipseMs.elipses = new Sequence();	
			for (ejb in microservicio.elementos) {
				var elipseClusterEjb =  new target!Elipse();
				elipseClusterEjb.largo = 10;
				elipseClusterEjb.alto = 10;				
				elipseClusterEjb.name = ejb.name;
				elipseMs.elipses.add(elipseClusterEjb);		
				elipsesEjb.add(elipseClusterEjb);					
			}			
			
			simplificado.elementos.add(elipseMs);
				
	}

	// conectores entre elipses de microservicios
	for (microservicio in microservicios) {
		
		var clasesMicroservicio = new Set;
		for (ejbCluster in microservicio.elementos) {
			for (clase in ejbCluster.elementos) {
				clasesMicroservicio.add(clase.name);
			}
		}
		
		var elipseSource = simplificado.elementos.select(e | e.name = microservicio.name and e.isTypeOf(target!Elipse)).first();
		elipseSource.conectores = new Set;	
		
		
		for(relacion in microservicio.relaciones){
					var asociacion = new target!Asociacion();					
					asociacion.color = target!Color#black;
					asociacion.estilo = target!EstiloLinea#SOLIDA;
					asociacion.enrutamiento = target!TipoEnrutamiento#DIRECTO;
					asociacion.flecha_source = target!TipoFlecha#NO_TIENE;
					asociacion.flecha_target = target!TipoFlecha#SENCILLA;					
					asociacion.source = elipseSource;
					asociacion.target = simplificado.elementos.select(e | e.name = relacion.target.name and e.isTypeOf(target!Elipse)).first(); 
					
					
					
					asociacion.diagrama = new target!Diagrama;
					asociacion.diagrama.name = "Conector " + asociacion.source.name + " - " + asociacion.target.name;
					asociacion.diagrama.elementos = new Sequence();
					asociacion.diagrama.isRoot = false;						
										
					var clasesInterseccion = new Set;
					var nombresClasesInterseccion = new Set;		
					for (ejbCluster in relacion.target.elementos) {
						for (claseTarget in ejbCluster.elementos) {						    
							for (claseSource in clasesMicroservicio) {	
								if (claseTarget.name <> claseSource and clasesMicroservicio.includes(claseTarget.name)) {	
								 			   
									var invocacion1 = 
										source!Invocacion.allInstances().select(i | i.fromMethod.clase.name = claseSource and  i.toMethod.clase.name = claseTarget.name).first();
									var invocacion2 = 
										source!Invocacion.allInstances().select(i | i.fromMethod.clase.name = claseTarget.name and  i.toMethod.clase.name = claseSource).first();
									if (invocacion1.isDefined()) {
										
										var claseFuente;
										if (nombresClasesInterseccion->includes(claseSource )) {										
											claseFuente = clasesInterseccion.select(c | c.name = claseSource  ).first();
										}
										else {										
											claseFuente  = new target!Clase();
											claseFuente.elementos = new Set();
											claseFuente.name = claseSource ;	
											clasesInterseccion.add(claseFuente);
											nombresClasesInterseccion.add(claseFuente.name);
											asociacion.diagrama.elementos.add(claseFuente);	
											
										}
										var invocacionMetodos = new target!Item(); 
										invocacionMetodos.name = invocacion1.fromMethod.nombreMetodo + "->" + invocacion1.toMethod.clase.name + "." + invocacion1.toMethod.nombreMetodo ;
										invocacionMetodos.icono = "MessageSynchCallCreation";
										claseFuente.elementos.add(invocacionMetodos);	
										
										var claseDestino;
										if (nombresClasesInterseccion->includes(claseTarget.name )) {										
											claseDestino = clasesInterseccion.select(c | c.name = claseTarget.name  ).first();
										}
										else {										
											claseDestino  = new target!Clase();
											claseDestino.elementos = new Set();
											claseDestino.name = claseTarget.name ;	
											clasesInterseccion.add(claseDestino);
											nombresClasesInterseccion.add(claseDestino.name);
											asociacion.diagrama.elementos.add(claseDestino);
											
										}
																
										
									}
								}
							} 
							
												
						}
					}	
																		
 					elipseSource.conectores.add(asociacion);
		}						
	}
	
	// conectores entre elipses de clusters EJB (los cuales estan dentro de las elipses de micros)
	for (ejb in source!Cluster.allInstances()) {
		var ejbAsociados = new Set;
		var elipseSource = elipsesEjb.select(e | e.name = ejb.name and e.isTypeOf(target!Elipse)).first();
		if (elipseSource.isDefined()) {			
			elipseSource.conectores = new Set;	
			for(relacion in ejb.relaciones){
						
						var asociacion = new target!Asociacion();					
						asociacion.color = target!Color#black;
						asociacion.estilo = target!EstiloLinea#SOLIDA;
						asociacion.enrutamiento = target!TipoEnrutamiento#DIRECTO;
						asociacion.flecha_source = target!TipoFlecha#NO_TIENE;
						asociacion.flecha_target = target!TipoFlecha#SENCILLA;					
						asociacion.source = elipseSource;
						asociacion.target = elipsesEjb.select(e | e.name = relacion.target.name and e.isTypeOf(target!Elipse)).first(); 
						//subAsociacion.diagrama = conecOrigen.diagrama; 					
	 					if (ejbAsociados->includes(asociacion.target.name)) {
							continue;
						}
						if (asociacion.source.name = asociacion.target.name ) {
							continue;
						}
													
						
						ejbAsociados.add(asociacion.target.name);
						elipseSource.conectores.add(asociacion);
						
	 					
			}		
		}				
	}
	
}

post {
	generarDiagramaSimplificado();
}
