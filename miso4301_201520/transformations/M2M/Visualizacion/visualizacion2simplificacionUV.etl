pre {
  "Running Simplification Transformation".println();
	var percentage : Real;
	var diagrama = source!Diagrama.allInstances()->select(d | d.isRoot)->first();
	var clusters = diagrama.elementos->select(e | e.isTypeOf(target!Elipse));  
}

operation generarDiagramaSimplificado() {
	"\tNÃºmero clusters: ".print();
	clusters.size().println();
	
	var simplificado = new target!Diagrama();
	simplificado.name = diagrama.name + " Simplificado " + (percentage * 100).round() + "%";
	simplificado.elementos = new Sequence();
	simplificado.diagrama = simplificado;
	simplificado.isRoot = true;
	
	var count = 1;
	var visitados = new Set;
	for (cluster in clusters) {
		if (visitados->includes(cluster)) {
			continue;
		}
			
		"*".println();
		var conectados = cluster.darConectados(percentage, visitados);
		if (not conectados.isEmpty()) {
			var clase  = new target!Elipse();
			clase.name = "Cluster " + count;
			clase.elipses = new Sequence();


			var diagramaSimConElip = new target!Diagrama();
			diagramaSimConElip.name = "Sim" + (percentage * 100).round() + "-" + count;
			diagramaSimConElip.elementos = new Sequence();
			diagramaSimConElip.diagrama = diagramaSimConElip;
			diagramaSimConElip.isRoot = true;
			
			for(elem in conectados){
				var subElipseTarget = new target!Elipse();
				var subElipseOrigen = source!Elipse.all.clone.select(x| x.name = elem.name).first();
				subElipseTarget.conectores = new Sequence();
				subElipseTarget.name = subElipseOrigen.name;
				subElipseTarget.color = subElipseOrigen.color;
				subElipseTarget.largo = subElipseOrigen.largo;
				subElipseTarget.alto = subElipseOrigen.alto;
				subElipseTarget.diagrama = subElipseOrigen.diagrama;
				//subElipseTarget.conectores = subElipseOrigen.conectores.clone();
				for(conecOrigen in subElipseOrigen.conectores.clone()){
					var subAsociacion = new target!Asociacion();
					subAsociacion.name = conecOrigen.name;
					subAsociacion.grosor = conecOrigen.grosor;
					subAsociacion.color = conecOrigen.color;
					subAsociacion.estilo = conecOrigen.estilo;
					subAsociacion.enrutamiento = conecOrigen.enrutamiento;
					subAsociacion.flecha_source = conecOrigen.flecha_source;
					subAsociacion.flecha_target = conecOrigen.flecha_target;
					subAsociacion.nameSource = conecOrigen.nameSource;
					subAsociacion.nameTarget = conecOrigen.nameTarget;
 					subElipseTarget.conectores.add(subAsociacion);
				}
				//subElipseTarget.conectores = subElipseOrigen.conectores.clone();
				if (subElipseOrigen.isTypeOf(target!Elipse)){
					diagramaSimConElip.elementos.add(subElipseTarget);
				}
			}
			
			var clasePrueba  = new target!Clase();
			clasePrueba.name = "ClasePrueba";
			clasePrueba.elementos = new Sequence();
			clasePrueba.diagrama = clasePrueba;
			diagramaSimConElip.elementos.add(clasePrueba);
			
			//for(elem in conectados){
				//var subElipse = source!Elipse.all.select(x| x.name = elem.name).first();
				//if (subElipse.isTypeOf(target!Elipse)){
				//	clase.elipses.add(subElipse);	
				//}
			//}
			clase.diagrama = diagramaSimConElip;
			clase.~conectores= cluster.~conectores;
			simplificado.elementos.add(clase);
			" TAMANO ".println(simplificado.elementos.size());
			count = count + 1;
		}		
	}
	
	"\n\tGenerarRelaciones".println();
	//generarRelacionesDiagramaSimplificado(simplificado);
}

operation target!Elipse darConectados(percentage : Real, visitados : Set) : Set {
	var conjunto = new Set;
	conjunto.add(self);
	visitados.add(self);
	self.~conectores = new Set;
	
	".".print();
	for (conector in self.conectores->select(c | c.source = self)) {
		var percentageMeasureSource = conector.nameSource.split("%")->first().asReal() / 100;
		var percentageMeasureTarget = conector.nameTarget.split("%")->first().asReal() / 100;
		if(percentageMeasureSource > percentage or percentageMeasureTarget > percentage) {
			if (visitados->includes(conector.target)) {
				continue;
			}
			conjunto.add(conector.target);
			visitados.add(conector.target);
			conjunto.addAll(conector.target.darConectados(percentage, visitados));
		} else {
			self.~conectores.add(conector.target.name);
		}
	}
	return conjunto;
}

operation generarRelacionesDiagramaSimplificado(simplificado : target!Diagrama) {
	for(clase in simplificado.elementos) {
		var asociaciones = new Set;
		for (conector in clase.~conectores) {
			for (relacionado in simplificado.elementos->select(e | e <> clase)) {
				if (relacionado.conectores->select(c | c.target = clase).isEmpty()) {
					for (item in relacionado.elementos) {
						if (item.name == conector) {
							var asociacion = new target!Asociacion;
							asociacion.enrutamiento = target!TipoEnrutamiento#DIRECTO;
							asociacion.source = clase;
							asociacion.target = relacionado;
							if (not(asociaciones.select(x | x.source = clase and x.target = relacionado).isEmpty())){
								"".println("ya existo");
							}
							else {
								asociaciones.add(asociacion);
							}
						}
					}
				}
			}
		}
			
		clase.conectores = asociaciones;
	}
}

post {
	"\n\nGenerarDiagramaSimplificado".println();
	var index : Real = 1.0;
	while (index > 0.0) {
		percentage = index;
		generarDiagramaSimplificado();
		index = index - 0.05;	
	}
	"\n\nDone".println();
}
